---
import { type CollectionEntry, getCollection } from "astro:content";
import { Image } from "astro:assets";
import Layout from "@layouts/Layout.astro";
import IconLink from "@components/IconLink.astro";
import { Icon } from "astro-icon/components";
export async function getStaticPaths() {
    const renameEntries = await getCollection("projects");
    return renameEntries.map((entry) => ({
        params: { slug: entry.slug },
        props: { entry }
    }));
}
const { entry } = Astro.props as { entry: CollectionEntry<"projects"> };
const { Content } = await entry.render();

const firstOtherLink = entry.data.links?.other?.[0];

const restOther = entry.data.links?.other?.slice(1);

const og = {
    src: entry.data.image,
    alt: entry.data.name
};
---

<Layout title={entry.data.name} description={entry.data.summary} keywords={entry.data.tags} og={og}>
    <div class="hero">
        <div class="txt">
            <hgroup>
                <h1 class="gradient-text">{entry.data.name}</h1>
                <h2>
                    {entry.data.timespan.from}{
                        entry.data.timespan.to && <> - {entry.data.timespan.to}</>
                    } •
                    {entry.data.tags.join(" • ")}
                </h2>
            </hgroup>
            <p>{entry.data.summary}</p>
            <div class="ctas">
                {
                    entry.data.links?.github && (
                        <span>
                            <a href={`https://github.com/${entry.data.links.github}`} role="button">
                                <Icon name="bi:github" size={25} /> View On GitHub
                            </a>
                        </span>
                    )
                }
                {
                    firstOtherLink && (
                        <span>
                            <a href={firstOtherLink.url} role="button" class="secondary">
                                <Icon
                                    name={`${firstOtherLink.iconPackOverride ?? "bi"}:${
                                        firstOtherLink.icon
                                    }`}
                                    size={25}
                                />
                                {firstOtherLink.label}
                            </a>
                        </span>
                    )
                }
            </div>
            <div class="links">
                {
                    restOther &&
                        restOther.map((l) => (
                            <span>
                                <IconLink
                                    icon={l.icon}
                                    overridePack={l.iconPackOverride}
                                    size={25}
                                    href={l.url}
                                    placement="bottom"
                                    label={l.label}
                                />
                            </span>
                        ))
                }
            </div>
        </div>
        <div class="img-container">
            <Image
                format="webp"
                width={474}
                height={474}
                alt={entry.data.name}
                src={entry.data.image}
            />
        </div>
    </div>
    <Content />
</Layout>

<style>
    .hero {
        display: flex;
        flex-direction: row;
        gap: calc(var(--spacing) * 5);
        justify-content: space-between;
        align-items: center;
        margin: calc(var(--spacing) * 10) 0;
    }

    @media (width <= 575px) {
        .hero {
            flex-direction: column-reverse;
        }
    }

    .hero .txt {
        width: 100%;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        gap: calc(var(--spacing) * 2);
    }

    .hero .ctas {
        display: flex;
        align-items: center;
        gap: calc(var(--spacing) * 2);
    }

    .hero .ctas a[role="button"] {
        display: flex;
        align-items: center;
        gap: var(--spacing);
    }

    .hero .img-container {
        flex-grow: 1;
        width: 100%;
    }

    .links {
        display: flex;
        gap: calc(var(--spacing) * 2);
    }
</style>

---
import { type CollectionEntry, getCollection } from "astro:content";
import { Image } from "astro:assets";
import Layout from "@layouts/Layout.astro";
import IconLink from "@components/IconLink.astro";
import { Icon } from "astro-icon/components";
export async function getStaticPaths() {
  const renameEntries = await getCollection("projects");
  return renameEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry }
  }));
}
const { entry } = Astro.props as { entry: CollectionEntry<"projects"> };
const { Content } = await entry.render();

const firstOtherLink = entry.data.links?.other?.[0];

const restOther = entry.data.links?.other?.slice(1);

const og = {
  src: entry.data.image,
  alt: entry.data.name
};
---

<Layout title={entry.data.name} description={entry.data.summary} keywords={entry.data.tags} og={og}>
  <div class="hero colrow-lg-rev">
    <div class="txt">
      <div class="project-header">
        <h1 class="gradient-text">{entry.data.name}</h1>
        <p>
          {entry.data.timespan.from}{entry.data.timespan.to && <> - {entry.data.timespan.to}</>} •
          {entry.data.tags.join(" • ")}
        </p>
      </div>
      <p>{entry.data.summary}</p>
      <div class="ctas">
        {
          entry.data.links?.github && (
            <span>
              <a href={`https://github.com/${entry.data.links.github}`} role="button">
                <Icon name="bi:github" /> View On GitHub
              </a>
            </span>
          )
        }
        {
          firstOtherLink && (
            <span>
              <a href={firstOtherLink.url} role="button" class="secondary">
                <Icon name={`${firstOtherLink.iconPackOverride ?? "bi"}:${firstOtherLink.icon}`} />
                {firstOtherLink.label}
              </a>
            </span>
          )
        }
      </div>
      <div class="links">
        {
          restOther &&
            restOther.map((l) => (
              <span>
                <IconLink
                  icon={l.icon}
                  overridePack={l.iconPackOverride}
                  href={l.url}
                  placement="bottom"
                  label={l.label}
                />
              </span>
            ))
        }
      </div>
    </div>
    <div class="colrow-lg-rev img-container">
      <Image format="webp" width={474} height={474} alt={entry.data.name} src={entry.data.image} />
    </div>
  </div>
  <Content />
</Layout>

<style>
  div.project-header h1 {
    margin-bottom: var(--1);
  }

  div.project-header p {
    font-size: var(--4);
    margin-top: 0;
  }

  .hero {
    display: flex;
    gap: var(--5);
    justify-content: space-between;
    align-items: center;
    margin: var(--4) 0;
  }

  @media (width <= 575px) {
    .hero {
      flex-direction: column-reverse;
    }
  }

  .hero .txt {
    width: 100%;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    gap: var(--2);
  }

  .hero .ctas {
    display: flex;
    align-items: center;
    gap: var(--2);
  }

  .hero .ctas a[role="button"] {
    display: flex;
    align-items: center;
    gap: var(--small);
  }

  .hero .img-container {
    flex-grow: 1;
    width: 100%;
    justify-content: end;
    align-items: center;
    display: flex;
    margin: auto;
  }

  .hero .img-container img {
    border-radius: var(--2);
    width: 100%;
    object-fit: contain;
  }

  .links {
    display: flex;
    gap: var(--2);
  }
</style>
